package at.fhtw.mse.awt.twentyone.services;

import at.fhtw.mse.awt.twentyone.dtos.gameSession.GameSessionCreationRequestDto;
import at.fhtw.mse.awt.twentyone.dtos.gameSession.GameSessionDto;
import at.fhtw.mse.awt.twentyone.dtos.gameSession.GameSessionUpdateRequestDto;
import at.fhtw.mse.awt.twentyone.entities.GameSession;
import at.fhtw.mse.awt.twentyone.entities.Player;
import at.fhtw.mse.awt.twentyone.interfaces.GameSessionService;
import at.fhtw.mse.awt.twentyone.repositories.GameSessionRepository;
import at.fhtw.mse.awt.twentyone.repositories.PlayerRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;

@Service
public class GameSessionServiceImpl implements GameSessionService {

    private final GameSessionRepository gameSessionRepository;
    private final PlayerRepository playerRepository;

    public GameSessionServiceImpl(GameSessionRepository gameSessionRepository, PlayerRepository playerRepository) {
        this.gameSessionRepository = gameSessionRepository;
        this.playerRepository = playerRepository;
    }

    @Override
    @Transactional
    public GameSessionDto createGameSession(GameSessionCreationRequestDto requestDto) {
        Player player = playerRepository.findById(requestDto.getPlayerId())
                .orElseThrow(() -> new EntityNotFoundException("Player not found with id: " + requestDto.getPlayerId()));

        // MODIFIED: Using constructor instead of builder
        // The constructor arguments must be in the order they are declared in the class.
        // id and gameResult are auto-generated or null initially.
        GameSession newGameSession = new GameSession(
                null,                   // id (generated by database)
                player,                 // player
                "ACTIVE",               // status
                LocalDateTime.now(),    // startTime
                null,                   // endTime
                null                    // gameResult
        );

        GameSession savedGameSession = gameSessionRepository.save(newGameSession);
        return mapToDto(savedGameSession);
    }

    @Override
    @Transactional(readOnly = true)
    public GameSessionDto getGameSession(Long id) {
        GameSession gameSession = gameSessionRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("GameSession not found with id: " + id));
        return mapToDto(gameSession);
    }

    @Override
    @Transactional
    public GameSessionDto updateGameSession(Long id, GameSessionUpdateRequestDto requestDto) {
        GameSession gameSession = gameSessionRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("GameSession not found with id: " + id));

        gameSession.setStatus(requestDto.getStatus());

        if (!"ACTIVE".equalsIgnoreCase(requestDto.getStatus()) && gameSession.getEndTime() == null) {
            gameSession.setEndTime(LocalDateTime.now());
        }

        GameSession updatedGameSession = gameSessionRepository.save(gameSession);
        return mapToDto(updatedGameSession);
    }

    @Override
    @Transactional
    public void deleteGameSession(Long id) {
        if (!gameSessionRepository.existsById(id)) {
            throw new EntityNotFoundException("GameSession not found with id: " + id);
        }
        gameSessionRepository.deleteById(id);
    }

    private GameSessionDto mapToDto(GameSession gameSession) {
        if (gameSession == null) {
            return null;
        }
        // MODIFIED: Using constructor instead of builder
        return new GameSessionDto(
                gameSession.getId(),
                gameSession.getPlayer().getPlayerId(),
                gameSession.getStatus(),
                gameSession.getStartTime(),
                gameSession.getEndTime()
        );
    }
}