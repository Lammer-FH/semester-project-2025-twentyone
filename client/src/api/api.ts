/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface GameSessionDto
 */
export interface GameSessionDto {
    /**
     *
     * @type {number}
     * @memberof GameSessionDto
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof GameSessionDto
     */
    'startTime'?: string;
    /**
     *
     * @type {string}
     * @memberof GameSessionDto
     */
    'endTime'?: string;
}

/**
 * GameSessionControllerApi - axios parameter creator
 * @export
 */
export const GameSessionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Zeigt den aktuellen Spielstatus an
         * @param {number} id ID der Spielsession
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameStatus: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGameStatus', 'id', id)
            const localVarPath = `/game-sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameSessionControllerApi - functional programming interface
 * @export
 */
export const GameSessionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameSessionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Zeigt den aktuellen Spielstatus an
         * @param {number} id ID der Spielsession
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameStatus(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameSessionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGameStatus(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionControllerApi.getGameStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameSessionControllerApi - factory interface
 * @export
 */
export const GameSessionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameSessionControllerApiFp(configuration)
    return {
        /**
         *
         * @summary Zeigt den aktuellen Spielstatus an
         * @param {number} id ID der Spielsession
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameStatus(id: number, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionDto> {
            return localVarFp.getGameStatus(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameSessionControllerApi - object-oriented interface
 * @export
 * @class GameSessionControllerApi
 * @extends {BaseAPI}
 */
export class GameSessionControllerApi extends BaseAPI {
    /**
     *
     * @summary Zeigt den aktuellen Spielstatus an
     * @param {number} id ID der Spielsession
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionControllerApi
     */
    public getGameStatus(id: number, options?: RawAxiosRequestConfig) {
        return GameSessionControllerApiFp(this.configuration).getGameStatus(id, options).then((request) => request(this.axios, this.basePath));
    }
}



