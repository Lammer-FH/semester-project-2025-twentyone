/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GameResultDto
 */
export interface GameResultDto {
    /**
     * 
     * @type {number}
     * @memberof GameResultDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameResultDto
     */
    'gameSessionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GameResultDto
     */
    'outcome'?: string;
    /**
     * 
     * @type {number}
     * @memberof GameResultDto
     */
    'payout'?: number;
}
/**
 * 
 * @export
 * @interface GameSessionCreationRequestDto
 */
export interface GameSessionCreationRequestDto {
    /**
     * 
     * @type {number}
     * @memberof GameSessionCreationRequestDto
     */
    'playerId'?: number;
}
/**
 * 
 * @export
 * @interface GameSessionDto
 */
export interface GameSessionDto {
    /**
     * 
     * @type {number}
     * @memberof GameSessionDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameSessionDto
     */
    'playerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GameSessionDto
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSessionDto
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSessionDto
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface GameSessionUpdateRequestDto
 */
export interface GameSessionUpdateRequestDto {
    /**
     * 
     * @type {string}
     * @memberof GameSessionUpdateRequestDto
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface MoveDto
 */
export interface MoveDto {
    /**
     * 
     * @type {number}
     * @memberof MoveDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MoveDto
     */
    'gameSessionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MoveDto
     */
    'moveType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoveDto
     */
    'occuredAt'?: string;
}
/**
 * 
 * @export
 * @interface PlayerDto
 */
export interface PlayerDto {
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerDto
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface PlayerRequestDto
 */
export interface PlayerRequestDto {
    /**
     * 
     * @type {number}
     * @memberof PlayerRequestDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerRequestDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerRequestDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerRequestDto
     */
    'passwordHash'?: string;
}

/**
 * GameResultsApi - axios parameter creator
 * @export
 */
export const GameResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the game result for a specific game session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameResultForSession: async (sessionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getGameResultForSession', 'sessionId', sessionId)
            const localVarPath = `/game-sessions/{sessionId}/game-results`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameResultsApi - functional programming interface
 * @export
 */
export const GameResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameResultsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the game result for a specific game session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameResultForSession(sessionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGameResultForSession(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameResultsApi.getGameResultForSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameResultsApi - factory interface
 * @export
 */
export const GameResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameResultsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the game result for a specific game session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameResultForSession(sessionId: number, options?: RawAxiosRequestConfig): AxiosPromise<GameResultDto> {
            return localVarFp.getGameResultForSession(sessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameResultsApi - object-oriented interface
 * @export
 * @class GameResultsApi
 * @extends {BaseAPI}
 */
export class GameResultsApi extends BaseAPI {
    /**
     * 
     * @summary Get the game result for a specific game session
     * @param {number} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameResultsApi
     */
    public getGameResultForSession(sessionId: number, options?: RawAxiosRequestConfig) {
        return GameResultsApiFp(this.configuration).getGameResultForSession(sessionId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GameSessionApi - axios parameter creator
 * @export
 */
export const GameSessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Start a new game session
         * @param {GameSessionCreationRequestDto} gameSessionCreationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGameSession: async (gameSessionCreationRequestDto: GameSessionCreationRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameSessionCreationRequestDto' is not null or undefined
            assertParamExists('createGameSession', 'gameSessionCreationRequestDto', gameSessionCreationRequestDto)
            const localVarPath = `/game-sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gameSessionCreationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary End a game session and clear its state
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGameSession: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGameSession', 'id', id)
            const localVarPath = `/game-sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get game session by ID (View Game Status)
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameSession: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGameSession', 'id', id)
            const localVarPath = `/game-sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Modify game-session details (e.g., change activity state)
         * @param {number} id 
         * @param {GameSessionUpdateRequestDto} gameSessionUpdateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGameSession: async (id: number, gameSessionUpdateRequestDto: GameSessionUpdateRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGameSession', 'id', id)
            // verify required parameter 'gameSessionUpdateRequestDto' is not null or undefined
            assertParamExists('updateGameSession', 'gameSessionUpdateRequestDto', gameSessionUpdateRequestDto)
            const localVarPath = `/game-sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gameSessionUpdateRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameSessionApi - functional programming interface
 * @export
 */
export const GameSessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameSessionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Start a new game session
         * @param {GameSessionCreationRequestDto} gameSessionCreationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGameSession(gameSessionCreationRequestDto: GameSessionCreationRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameSessionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGameSession(gameSessionCreationRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionApi.createGameSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary End a game session and clear its state
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGameSession(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGameSession(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionApi.deleteGameSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get game session by ID (View Game Status)
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameSession(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameSessionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGameSession(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionApi.getGameSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Modify game-session details (e.g., change activity state)
         * @param {number} id 
         * @param {GameSessionUpdateRequestDto} gameSessionUpdateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGameSession(id: number, gameSessionUpdateRequestDto: GameSessionUpdateRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameSessionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGameSession(id, gameSessionUpdateRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionApi.updateGameSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameSessionApi - factory interface
 * @export
 */
export const GameSessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameSessionApiFp(configuration)
    return {
        /**
         * 
         * @summary Start a new game session
         * @param {GameSessionCreationRequestDto} gameSessionCreationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGameSession(gameSessionCreationRequestDto: GameSessionCreationRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionDto> {
            return localVarFp.createGameSession(gameSessionCreationRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary End a game session and clear its state
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGameSession(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteGameSession(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get game session by ID (View Game Status)
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameSession(id: number, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionDto> {
            return localVarFp.getGameSession(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Modify game-session details (e.g., change activity state)
         * @param {number} id 
         * @param {GameSessionUpdateRequestDto} gameSessionUpdateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGameSession(id: number, gameSessionUpdateRequestDto: GameSessionUpdateRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionDto> {
            return localVarFp.updateGameSession(id, gameSessionUpdateRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameSessionApi - object-oriented interface
 * @export
 * @class GameSessionApi
 * @extends {BaseAPI}
 */
export class GameSessionApi extends BaseAPI {
    /**
     * 
     * @summary Start a new game session
     * @param {GameSessionCreationRequestDto} gameSessionCreationRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionApi
     */
    public createGameSession(gameSessionCreationRequestDto: GameSessionCreationRequestDto, options?: RawAxiosRequestConfig) {
        return GameSessionApiFp(this.configuration).createGameSession(gameSessionCreationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary End a game session and clear its state
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionApi
     */
    public deleteGameSession(id: number, options?: RawAxiosRequestConfig) {
        return GameSessionApiFp(this.configuration).deleteGameSession(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get game session by ID (View Game Status)
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionApi
     */
    public getGameSession(id: number, options?: RawAxiosRequestConfig) {
        return GameSessionApiFp(this.configuration).getGameSession(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Modify game-session details (e.g., change activity state)
     * @param {number} id 
     * @param {GameSessionUpdateRequestDto} gameSessionUpdateRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionApi
     */
    public updateGameSession(id: number, gameSessionUpdateRequestDto: GameSessionUpdateRequestDto, options?: RawAxiosRequestConfig) {
        return GameSessionApiFp(this.configuration).updateGameSession(id, gameSessionUpdateRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MoveDetailsApi - axios parameter creator
 * @export
 */
export const MoveDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a move
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMove', 'id', id)
            const localVarPath = `/moves/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a move
         * @param {number} id 
         * @param {MoveDto} moveDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMove: async (id: number, moveDto: MoveDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMove', 'id', id)
            // verify required parameter 'moveDto' is not null or undefined
            assertParamExists('updateMove', 'moveDto', moveDto)
            const localVarPath = `/moves/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MoveDetailsApi - functional programming interface
 * @export
 */
export const MoveDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MoveDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a move
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MoveDetailsApi.deleteMove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a move
         * @param {number} id 
         * @param {MoveDto} moveDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMove(id: number, moveDto: MoveDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoveDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMove(id, moveDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MoveDetailsApi.updateMove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MoveDetailsApi - factory interface
 * @export
 */
export const MoveDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MoveDetailsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a move
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMove(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a move
         * @param {number} id 
         * @param {MoveDto} moveDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMove(id: number, moveDto: MoveDto, options?: RawAxiosRequestConfig): AxiosPromise<MoveDto> {
            return localVarFp.updateMove(id, moveDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MoveDetailsApi - object-oriented interface
 * @export
 * @class MoveDetailsApi
 * @extends {BaseAPI}
 */
export class MoveDetailsApi extends BaseAPI {
    /**
     * 
     * @summary Delete a move
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoveDetailsApi
     */
    public deleteMove(id: number, options?: RawAxiosRequestConfig) {
        return MoveDetailsApiFp(this.configuration).deleteMove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a move
     * @param {number} id 
     * @param {MoveDto} moveDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoveDetailsApi
     */
    public updateMove(id: number, moveDto: MoveDto, options?: RawAxiosRequestConfig) {
        return MoveDetailsApiFp(this.configuration).updateMove(id, moveDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MovesApi - axios parameter creator
 * @export
 */
export const MovesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new move
         * @param {number} sessionId 
         * @param {MoveDto} moveDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMove: async (sessionId: number, moveDto: MoveDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('createMove', 'sessionId', sessionId)
            // verify required parameter 'moveDto' is not null or undefined
            assertParamExists('createMove', 'moveDto', moveDto)
            const localVarPath = `/game-sessions/{sessionId}/moves`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all moves for a session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoves: async (sessionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getMoves', 'sessionId', sessionId)
            const localVarPath = `/game-sessions/{sessionId}/moves`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MovesApi - functional programming interface
 * @export
 */
export const MovesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MovesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new move
         * @param {number} sessionId 
         * @param {MoveDto} moveDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMove(sessionId: number, moveDto: MoveDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoveDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMove(sessionId, moveDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.createMove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all moves for a session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMoves(sessionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MoveDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMoves(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.getMoves']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MovesApi - factory interface
 * @export
 */
export const MovesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MovesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new move
         * @param {number} sessionId 
         * @param {MoveDto} moveDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMove(sessionId: number, moveDto: MoveDto, options?: RawAxiosRequestConfig): AxiosPromise<MoveDto> {
            return localVarFp.createMove(sessionId, moveDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all moves for a session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoves(sessionId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<MoveDto>> {
            return localVarFp.getMoves(sessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MovesApi - object-oriented interface
 * @export
 * @class MovesApi
 * @extends {BaseAPI}
 */
export class MovesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new move
     * @param {number} sessionId 
     * @param {MoveDto} moveDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public createMove(sessionId: number, moveDto: MoveDto, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).createMove(sessionId, moveDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all moves for a session
     * @param {number} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public getMoves(sessionId: number, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).getMoves(sessionId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlayerApi - axios parameter creator
 * @export
 */
export const PlayerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new player
         * @param {PlayerRequestDto} playerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlayer: async (playerRequestDto: PlayerRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerRequestDto' is not null or undefined
            assertParamExists('createPlayer', 'playerRequestDto', playerRequestDto)
            const localVarPath = `/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete player by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayer: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePlayer', 'id', id)
            const localVarPath = `/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get player by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPlayer', 'id', id)
            const localVarPath = `/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update player by ID
         * @param {number} id 
         * @param {PlayerRequestDto} playerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayer: async (id: number, playerRequestDto: PlayerRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePlayer', 'id', id)
            // verify required parameter 'playerRequestDto' is not null or undefined
            assertParamExists('updatePlayer', 'playerRequestDto', playerRequestDto)
            const localVarPath = `/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayerApi - functional programming interface
 * @export
 */
export const PlayerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new player
         * @param {PlayerRequestDto} playerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlayer(playerRequestDto: PlayerRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlayer(playerRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayerApi.createPlayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete player by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlayer(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlayer(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayerApi.deletePlayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get player by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayer(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayer(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayerApi.getPlayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update player by ID
         * @param {number} id 
         * @param {PlayerRequestDto} playerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlayer(id: number, playerRequestDto: PlayerRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlayer(id, playerRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayerApi.updatePlayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlayerApi - factory interface
 * @export
 */
export const PlayerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new player
         * @param {PlayerRequestDto} playerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlayer(playerRequestDto: PlayerRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<PlayerDto> {
            return localVarFp.createPlayer(playerRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete player by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayer(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePlayer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get player by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer(id: number, options?: RawAxiosRequestConfig): AxiosPromise<PlayerDto> {
            return localVarFp.getPlayer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update player by ID
         * @param {number} id 
         * @param {PlayerRequestDto} playerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayer(id: number, playerRequestDto: PlayerRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<PlayerDto> {
            return localVarFp.updatePlayer(id, playerRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
export class PlayerApi extends BaseAPI {
    /**
     * 
     * @summary Create new player
     * @param {PlayerRequestDto} playerRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public createPlayer(playerRequestDto: PlayerRequestDto, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).createPlayer(playerRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete player by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public deletePlayer(id: number, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).deletePlayer(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get player by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getPlayer(id: number, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getPlayer(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update player by ID
     * @param {number} id 
     * @param {PlayerRequestDto} playerRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public updatePlayer(id: number, playerRequestDto: PlayerRequestDto, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).updatePlayer(id, playerRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



